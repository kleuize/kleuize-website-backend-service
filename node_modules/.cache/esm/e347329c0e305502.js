let express,cors,readdirSync,mongoose,csrf,cookieParser;_0e3‍.w("express",[["default",["express"],function(v){express=v}]]);_0e3‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_0e3‍.w("fs",[["readdirSync",["readdirSync"],function(v){readdirSync=v}]]);_0e3‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_0e3‍.w("csurf",[["default",["csrf"],function(v){csrf=v}]]);_0e3‍.w("cookie-parser",[["default",["cookieParser"],function(v){cookieParser=v}]]);

 //core node.js module, helps autoload routes



const morgan = require("morgan"); ///morgan has trouble being imported that way so standard node require used
require("dotenv").config(); //helps load in our environment variables easier into this namespace

const csrfProtection = csrf({ cookie: true }); //this is to stop URL attacks to grab tokens

//create express app
const app = express();

//db work
mongoose
  .connect(process.env.DATABASE, { useNewUrlParser: true })
  .then(() => console.log("db connected"))
  .catch((err) => _0e3‍.g.console.log("db connection error", err));

//apply middlewares - runs before any response is sent back to client
app.use(cors());
app.use(express.json({ limit: "5mb" }));
app.use(morgan("dev"));
app.use(cookieParser());

//route - mapping all routes and syncing them and appling each one as middleware, this way dont have to require each new route file
//fs has been destructured when required so we can just use the function
readdirSync("./routes").map((r) => app.use("/api", require(`./routes/${r}`)));

//csrf
app.use(csrfProtection);
app.get("/api/csrf-token", (req, res) => {
  res.json({ csrfToken: req.csrfToken() });
}); //now with this done we can secure the token from the front end

//set up the port
const port = process.env.PORT || 5000;

app.listen(port, () => console.log(`server is running on port ${port}`));
